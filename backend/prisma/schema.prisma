generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model hot_item {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value Int?

  @@map(name: "hot_items")
}

model status {
  id            Int      @id @default(autoincrement())
  business_name String   @unique
  updated_at    DateTime @default(now())
  products      Int

  @@map(name: "statuses")
}

model shop {
  id            Int      @id @default(autoincrement())
  business_name String
  domain        String   @unique
  vertical      String?
  site_host     String
  city          String?
  province      String?
  postal_code   String?
  country       String?
  created_at    DateTime @default(now())

  @@map(name: "shops")
}

model product {
  id            Int      @id @default(autoincrement())
  business_name String?  @map(name: "businessName")
  title         String   @unique
  handle        String?
  body_html     String?  @map(name: "bodyHtml")
  vendor        String?
  product_type  String?  @map(name: "productType")
  created_at    DateTime @default(now()) @map(name: "createdAt")
  published_at  DateTime @default(now()) @map(name: "publishedAt")
  updated_at    DateTime @default(now()) @map(name: "updatedAt")
  tags          String[]
  variants      Json?
  images        Json?
  options       Json?
  rating        Int?     @default(0)

  @@map(name: "products")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}