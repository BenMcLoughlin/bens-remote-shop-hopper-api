generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model hot_item {
  id               Int      @id @default(autoincrement())
  body_html        String?  @map("bodyHtml")
  buckets          String[]
  business_name    String?  @map("businessName")
  colors           String[]
  compare_at_price Int?     @map("compareAtPrice")
  created_at       DateTime @default(now()) @map("createdAt")
  handle           String?
  images           Json?
  options          Json?
  original_price   Int?     @map("originalPrice")
  product_type     String?  @map("productType")
  published_at     DateTime @default(now()) @map("publishedAt")
  rating           Int?     @default(0)
  sizes            String[]
  tags             String[]
  title            String   @unique
  updated_at       DateTime @default(now()) @map("updatedAt")
  variants         Json?
  vendor           String?

  @@map("hot_items")
}

model status {
  id            Int      @id @default(autoincrement())
  updated_at    DateTime @default(now())
  products      Int
  business_name String   @unique

  @@map("statuses")
}

model shop {
  id            Int      @id @default(autoincrement())
  domain        String   @unique
  vertical      String?
  city          String?
  province      String?
  country       String?
  created_at    DateTime @default(now())
  business_name String
  postal_code   String?
  site_host     String
  buckets       String[]

  @@map("shops")
}

model product {
  id               Int      @id @default(autoincrement())
  business_name    String?  @map("businessName")
  title            String   @unique
  handle           String?
  vendor           String?
  tags             String[]
  variants         Json?
  images           Json?
  options          Json?
  rating           Int?     @default(0)
  body_html        String?  @map("bodyHtml")
  created_at       DateTime @default(now()) @map("createdAt")
  product_type     String?  @map("productType")
  published_at     DateTime @default(now()) @map("publishedAt")
  updated_at       DateTime @default(now()) @map("updatedAt")
  colors           String[]
  compare_at_price Int?     @map("compareAtPrice")
  original_price   Int?     @map("originalPrice")
  sizes            String[]
  buckets          String[]

  @@map("products")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], map: "providerAccountId")
  @@index([providerId], map: "providerId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}
