generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model TemplateClass {
  id               Int      @id @default(autoincrement())
  class_name       String   @unique
  items            String[]
  isSet            Boolean
  submitted        Boolean
  updated_at       DateTime @default(now())
  created_at       DateTime @default(now())

  @@map("template_classes")
}

model HotItem {
  id               Int      @id @default(autoincrement())
  body_html        String?  
  buckets          String[]
  business_name    String?  
  colors           String[]
  compare_at_price Int?     
  created_at       DateTime @default(now()) 
  handle           String?
  images           Json?
  options          Json?
  original_price   Int?     
  product_type     String?  
  published_at     DateTime @default(now())
  rating           Int?     @default(0)
  sizes            String[]
  tags             String[]
  title            String   @unique
  updated_at       DateTime @default(now())
  variants         Json?
  vendor           String?

  @@map("hot_items")
}

model Status {
  id            Int      @id @default(autoincrement())
  updated_at    DateTime @default(now())
  products      Int
  business_name String   @unique

  @@map("statuses")
}

model Shop {
  id            Int      @id @default(autoincrement())
  domain        String   @unique
  vertical      String?
  city          String?
  province      String?
  country       String?
  created_at    DateTime @default(now())
  business_name String
  postal_code   String?
  site_host     String
  buckets       String[]

  @@map("shops")
}

model Product {
  id               Int      @id @default(autoincrement())
  business_name    String?  
  title            String   @unique
  handle           String?
  vendor           String?
  tags             String[]
  variants         Json?
  images           Json?
  options          Json?
  rating           Int?     @default(0)
  body_html        String?  
  created_at       DateTime @default(now()) 
  product_type     String?  
  published_at     DateTime @default(now())
  updated_at       DateTime @default(now()) 
  colors           String[]
  compare_at_price Int?     
  original_price   Int?     
  sizes            String[]
  buckets          String[]

  @@map("products")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  birthdate     Int?
  gender        String?
  image         String?
  role          String?
  size          Json?
  buckets       String[]
  location      Json?
  favourite     Json?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
