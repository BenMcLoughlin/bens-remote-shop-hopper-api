// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("STAGING_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id           Int     @default(autoincrement()) @id
  title        String
  handle       String?
  body_html    String?
  vendor       String?
  product_type String?
  publishedAt  DateTime  @default(now()) @map(name: "published_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")
  author       User?   @relation(fields: [authorId], references: [id])
  authorId     Int?
  tags         [String?]
  variants     Variant? @relation(fields: [variantId], references: [id])
  variantId    [Int?]
  images       Image? @relation(fields: [imageId], references: [id])
  imageId      [Int?]
  options      Option? @relation(fields: [optionId], references: [id])
  optionId     [Int?]

  @@map(name: "products")
}

const productSchema = new Schema({
    id: String,
    title: String,
    handle: String,
    body_html: String, 
    created_at: Date,
    updated_at: Date,
    vendor: String,
    product_type: String,
    tags: [String],
    variants: [VariantSchema],
    images: [ImageSchema],
    options: [OptionsSchema],
})

model Variant {
  id           Int     @default(autoincrement()) @id
  title        String
  option1      String?
  option2      String?
  option3      String?
  sku          String?
  requires_shipping String?
  taxable      Boolean
  featured_image Image? @relation(fields: [imageId], references: [id])
  available    Boolean
  price        String?
  grams        Boolean
  compare_at_price Int?
  position     Int?
  product_id   Int?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "variants")
}

const VariantSchema = new Schema({
  id: String,
  title: String,
  option1: String,
  option2: String,
  option3: String,
  sku: String,
  requires_shipping: Boolean,
  taxable: Boolean,
  featured_image: {
    id: String,
    product_id: String,
    position: String,
    created_at: Date,
    updated_at: Date,
    alt: Number,
    width: Number,
    height: Number,
    src: String,
    variant_ids: [Number],
  },
  available: Boolean,
  price: String,
  grams: Boolean,
  compare_at_price: Number,
  position: Number,
  product_id: Number,
  created_at: Date,
  updated_at: Date,
})

model Image {
  id           Int @default(autoincrement()) @id
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  position     Int?
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")
  product_id   Int?
  variant_ids  [Int?]
  src          String?
  width        Int?
  height       Int?

  @@map(name: "images")
}

const ImageSchema = new Schema({
  id: Number,
  created_at: Date,
  position: Number,
  updated_at: Date,
  product_id: Number,
  variant_ids: [Number],
  src: String,
  width: Number,
  height: Number,
})

model Option {
  id           Int @default(autoincrement()) @id
  name         String?
  position     Int?
  values       [String]

  @@map(name: "options")
}

const OptionsSchema = new Schema({
  name: String,
  position: Number,
  values: [String],
})

model Post {
  id        Int     @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]

  @@map(name: "users")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}